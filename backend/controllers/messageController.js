import asyncHandler from 'express-async-handler';
import Message from '../models/messageModel.js';
import Gig from '../models/gigModel.js';
import Bid from '../models/bidModel.js';
import { createNotification } from './notificationController.js'; // Import the notification helper

// @desc Â  Â Get messages for a specific gig
// @route Â  GET /api/messages/:gigId
// @access Â Private
const getMessages = asyncHandler(async (req, res) => {
Â  const gigId = req.params.gigId;
Â  const gig = await Gig.findById(gigId);

Â  if (!gig) {
Â  Â  res.status(404);
Â  Â  throw new Error('Gig not found');
Â  }

Â  // Authorization check for in-progress gigs
Â  if (gig.status === 'in-progress') {
Â  Â  const acceptedBid = await Bid.findOne({ gig: gigId, status: 'accepted' });
Â  Â  if (!acceptedBid) {
Â  Â  Â  res.status(404);
Â  Â  Â  throw new Error('No accepted applicant found for this gig.');
Â  Â  }
Â  Â  const isGigOwner = gig.user.toString() === req.user._id.toString();
Â  Â  const isAcceptedFreelancer = acceptedBid.user.toString() === req.user._id.toString();

Â  Â  if (!isGigOwner && !isAcceptedFreelancer) {
Â  Â  Â  res.status(403);
Â  Â  Â  throw new Error('You are not authorized to view this chat.');
Â  Â  }
Â  }

Â  const messages = await Message.find({ gig: gigId })
Â  Â  .populate('sender', 'name')
Â  Â  .populate('receiver', 'name')
Â  Â  .sort('createdAt');

Â  res.json(messages);
});

// @desc Â  Â Send a new message
// @route Â  POST /api/messages
// @access Â Private
const sendMessage = asyncHandler(async (req, res) => {
Â  const { receiverId, gigId, content } = req.body;
Â  const senderId = req.user._id;

Â  if (!receiverId || !gigId || !content) {
Â  Â  res.status(400);
Â  Â  throw new Error('Receiver, Gig, and Content are required.');
Â  }

Â  const gig = await Gig.findById(gigId);
Â  if (!gig) {
Â  Â  res.status(404);
Â  Â  throw new Error('Gig not found');
Â  }

Â  // Authorization check for in-progress gigs
Â  if (gig.status === 'in-progress') {
Â  Â  const acceptedBid = await Bid.findOne({ gig: gigId, status: 'accepted' });
Â  Â  if (!acceptedBid) {
Â  Â  Â  res.status(404);
Â  Â  Â  throw new Error('No accepted applicant found for this gig.');
Â  Â  }
Â  Â  const isGigOwner = gig.user.toString() === senderId.toString();
Â  Â  const isAcceptedFreelancer = acceptedBid.user.toString() === senderId.toString();

Â  Â  // Check if both sender and receiver are authorized to chat
Â  Â  const isReceiverAuthorized = receiverId.toString() === gig.user.toString() || receiverId.toString() === acceptedBid.user.toString();

Â  Â  if ((!isGigOwner && !isAcceptedFreelancer) || !isReceiverAuthorized) {
Â  Â  Â  res.status(403);
Â  Â  Â  throw new Error('You are not authorized to send messages for this gig.');
Â  Â  }
Â  }

Â  const message = new Message({
Â  Â  sender: senderId,
Â  Â  receiver: receiverId,
Â  Â  gig: gigId,
Â  Â  content: content,
Â  });

Â  const createdMessage = await message.save();
Â  const populatedMessage = await Message.findById(createdMessage._id)
Â  Â  .populate('sender', 'name')
Â  Â  .populate('receiver', 'name');

Â  // ðŸ’¡ NEW: Send a notification to the receiver
Â  // Prevents a user from notifying themselves when sending a message.
Â  if (senderId.toString() !== receiverId.toString()) {
Â  Â  await createNotification(
Â  Â  Â  req,
Â  Â  Â  receiverId,
Â  Â  Â  `New message from ${populatedMessage.sender.name} on gig "${gig.title}"`,
Â  Â  Â  `/gigs/${gigId}`
Â  Â  );
Â  }

Â  res.status(201).json(populatedMessage);
});

export { getMessages, sendMessage };